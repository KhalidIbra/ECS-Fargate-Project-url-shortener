name: Infra Deployment

on:
  workflow_run:
    workflows: ["Build + Push"]
    types:
      - completed
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event.workflow_run.conclusion == 'success'
      
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${{ github.event.workflow_run.head_sha || github.sha }}
      CODEDEPLOY_APP_NAME: ${{ secrets.CODEDEPLOY_APP_NAME }}
      CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}
      TASK_DEF_ARN: ${{ secrets.TASK_DEF_ARN }}
      ECS_EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
      ECS_TASK_ROLE_ARN: ${{ secrets.ECS_TASK_ROLE_ARN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-user
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra
        run: terraform init -backend-config="bucket=ki-terraform-state" -backend-config="region=$AWS_REGION"

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -auto-approve tfplan

      - name: Register ECS Task Definition
        run: |
          cat > taskdef.json << EOF
          {
            "family": "ki-url-service",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "ki-url-service",
                "image": "${IMAGE_URI}",
                "cpu": 256,
                "memory": 512,
                "essential": true,
                "portMappings": [
                  { "containerPort": 8080, "hostPort": 8080 }
                ],
                "environment": [
                  { "name": "TABLE_NAME", "value": "ki-url-mappings" }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "${ECS_EXECUTION_ROLE_ARN}",
            "taskRoleArn": "${ECS_TASK_ROLE_ARN}"
          }
          EOF

          aws ecs register-task-definition \
            --cli-input-json file://taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text > taskdef_arn.txt

      - name: Set Task Definition ARN
        run: echo "TASK_DEF_ARN=$(cat taskdef_arn.txt)" >> $GITHUB_ENV    


      
      - name: Create AppSpec file
        run: |
           cat <<EOF > appspec.json
            {
              "version": "0.0",
              "Resources": [
                {
                  "TargetService": {
                    "Type": "AWS::ECS::Service",
                    "Properties": {
                      "TaskDefinition": "${TASK_DEF_ARN}",
                      "LoadBalancerInfo": {
                        "ContainerName": "ki-url-service",
                        "ContainerPort": 8080
                      }
                    }
                  }
                }
              ]
            }
            EOF

      - name: Debug environment variables
        run: |
           echo "CODEDEPLOY_APP_NAME=$CODEDEPLOY_APP_NAME"
           echo "CODEDEPLOY_DEPLOYMENT_GROUP=$CODEDEPLOY_DEPLOYMENT_GROUP"
           echo "IMAGE_URI=$IMAGE_URI"

      - name: Print CodeDeploy variables
        run: |
           echo "App Name: '$CODEDEPLOY_APP_NAME'"
           echo "Deployment Group: '$CODEDEPLOY_DEPLOYMENT_GROUP'"


      - name: Trigger CodeDeploy ECS Deployment
        env:
          CODEDEPLOY_APP_NAME: ${{ secrets.CODEDEPLOY_APP_NAME }}
          CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}
        run: |
          echo "Starting CodeDeploy deployment..."
          echo "Using Application: ${CODEDEPLOY_APP_NAME}"
          echo "Deployment Group: ${CODEDEPLOY_DEPLOYMENT_GROUP}"

          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name "${CODEDEPLOY_APP_NAME}" \
            --deployment-group-name "${CODEDEPLOY_DEPLOYMENT_GROUP}" \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --description "Deployment for commit ${IMAGE_TAG}" \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":$(jq -Rs . < appspec.json)}} " \
            --query "deploymentId" --output text)

          echo "Deployment ID: ${DEPLOYMENT_ID}"
          echo "Waiting for deployment to complete..."

          aws deploy wait deployment-successful --deployment-id "${DEPLOYMENT_ID}"

          echo "Deployment succeeded!"

